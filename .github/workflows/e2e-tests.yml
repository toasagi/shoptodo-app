name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'smoke'
        type: choice
        options:
        - smoke
        - regression
        - all
      browser:
        description: 'Browser to test'
        required: true
        default: 'chromium'
        type: choice
        options:
        - chromium
        - firefox
        - webkit
        - all

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test

    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          coverage/
          jest-results.xml
        retention-days: 30

  e2e-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      fail-fast: false
      matrix:
        browser: ${{ github.event.inputs.browser == 'all' && fromJSON('["chromium", "firefox", "webkit"]') || fromJSON(format('["{0}"]', github.event.inputs.browser || 'chromium')) }}

    name: E2E Tests (${{ matrix.browser }})

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install main app dependencies
      run: npm ci

    - name: Install E2E dependencies
      run: |
        cd e2e
        npm ci

    - name: Install Playwright browsers
      run: |
        cd e2e
        npx playwright install --with-deps ${{ matrix.browser }}

    - name: Start application server
      run: |
        npm run serve &
        sleep 5
        curl -f http://localhost:8000 || (echo "Application failed to start" && exit 1)

    - name: Wait for application to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:8000; do sleep 1; done'

    - name: Run E2E tests
      id: e2e_tests
      run: |
        cd e2e
        TEST_TYPE="${{ github.event.inputs.test_type || 'smoke' }}"
        case "$TEST_TYPE" in
          "smoke")
            npm run test:e2e:smoke
            ;;
          "regression")
            npm run test:e2e:regression
            ;;
          "all")
            npm run test:e2e
            ;;
          *)
            npm run test:e2e:smoke
            ;;
        esac
      env:
        BROWSER: ${{ matrix.browser }}
        HEADLESS: 'true'
        APP_URL: 'http://localhost:8000'
        CI: 'true'

    - name: Generate test report
      if: always()
      run: |
        cd e2e
        npm run test:e2e:report || true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results-${{ matrix.browser }}
        path: |
          e2e/reports/
          e2e/test-results/
          e2e/screenshots/
        retention-days: 30

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: e2e/playwright-report/
        retention-days: 30

  parallel-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event.inputs.test_type == 'all' || github.event_name == 'schedule'

    name: Parallel E2E Tests

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd e2e
        npm ci

    - name: Install Playwright browsers
      run: |
        cd e2e
        npx playwright install --with-deps

    - name: Start application server
      run: |
        npm run serve &
        sleep 5
        curl -f http://localhost:8000 || (echo "Application failed to start" && exit 1)

    - name: Run parallel E2E tests
      run: |
        cd e2e
        npm run test:e2e:parallel
      env:
        HEADLESS: 'true'
        APP_URL: 'http://localhost:8000'
        CI: 'true'

    - name: Upload parallel test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: parallel-test-results
        path: |
          e2e/reports/
          e2e/test-results/
        retention-days: 30

  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: always()

    name: Test Summary

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create test summary
      run: |
        echo "# Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Unit Tests" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.unit-tests.result }}" == "success" ]; then
          echo "‚úÖ Unit tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Unit tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## E2E Tests" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "‚úÖ E2E tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå E2E tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Test reports and screenshots are available in the artifacts section" >> $GITHUB_STEP_SUMMARY
        echo "- Check individual job logs for detailed results" >> $GITHUB_STEP_SUMMARY

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo, number } = context.issue;
          const unitStatus = '${{ needs.unit-tests.result }}' === 'success' ? '‚úÖ' : '‚ùå';
          const e2eStatus = '${{ needs.e2e-tests.result }}' === 'success' ? '‚úÖ' : '‚ùå';

          const body = `## üß™ Test Results

          | Test Type | Status |
          |-----------|--------|
          | Unit Tests | ${unitStatus} |
          | E2E Tests | ${e2eStatus} |

          **Test Type**: ${{ github.event.inputs.test_type || 'smoke' }}
          **Browser**: ${{ github.event.inputs.browser || 'chromium' }}

          View detailed results in the [Actions tab](${context.payload.repository.html_url}/actions/runs/${context.runId}).`;

          github.rest.issues.createComment({
            owner,
            repo,
            issue_number: number,
            body
          });

  performance-tests:
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'all'

    name: Performance Tests

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start application server
      run: |
        npm run serve &
        sleep 5

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true